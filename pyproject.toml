[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ormdantic"
description = "asynchronous ORM that uses pydantic models to represent database tables"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    { name = "Yasser Tahiri", email = "hello@yezz.me" },
]
keywords = [
    "orm",
    "sqlalchemy",
    "pydantic",
    "asyncio",
]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Internet :: WWW/HTTP :: Session",
    "Topic :: Database",
    "Typing :: Typed",
]

dependencies = [
    "typing-extensions >=3.7.4,<4.7.0",
    "pydantic >=1.6.2,!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0",
    "sqlalchemy[asyncio]>=1.3.18,<2.0.0",
    "PyPika ==0.48.9"
]

dynamic = ["version"]

[tool.hatch.metadata]
allow-direct-references = true

[project.urls]
Homepage = "https://github.com/yezz123/ormdantic"
Documentation = "https://ormdantic.yezz.me/"
Funding = 'https://github.com/sponsors/yezz123'

[project.optional-dependencies]
sqlite = [
    "aiosqlite",
]
postgresql = [
    "psycopg2-binary",
    "asyncpg"
]
lint = [
    "pre-commit==3.3.2",
    "mypy==1.3.0",
]
test = [
    "pytest==7.3.1",
    "pytest-asyncio == 0.21.0",
    "pytest-cov==4.1.0",
    "python-decouple",
    "pytest-pretty==1.2.0"
]
docs = [
    "mkdocs >=1.1.2,<2.0.0",
    "mkdocs-material >=8.1.4,<10.0.0",
    "mdx-include >=1.4.1,<2.0.0",
    "mkdocs-markdownextradata-plugin >=0.1.7,<0.3.0",
    "mkdocs-mermaid2-plugin==0.6.0",
    "markdown-include==0.8.1",
    "pymdown-extensions==10.0.1",
    "jinja2==3.1.2"
]

[tool.hatch.version]
path = "ormdantic/__init__.py"

[tool.isort]
profile = "black"
known_third_party = ["pydantic", "sqlalchemy", "typing_extensions"]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["pydantic", "sqlalchemy", "typing_extensions"]

[tool.coverage.run]
source = ["ormdantic"]
branch = true
context = '${CONTEXT}'

[tool.coverage.paths]
source = [
    "ormdantic",
]

[tool.mypy]
plugins = "pydantic.mypy"
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
ignore_missing_imports = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    'dotenv.*',
]
ignore_missing_imports = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "raise NotImplemented",
    "@overload",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]

[tool.pytest.ini_options]
testpaths = 'tests'
log_cli = "1"
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format= "%Y-%m-%d %H:%M:%S"
asyncio_mode= "auto"
