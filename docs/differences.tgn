{"rows_views":[[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}}],[{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":""}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}},{"style":{"borders":"lrtb","font_style":{},"text_color":"","bg_color":"","halign":"left","valign":"top","padding":{"top":10,"right":5,"bottom":10,"left":5},"border_color":"inherit"}}]],"model":{"rows":[[{"value":"(as of August 2022)","cspan":1,"rspan":1,"markup":[1,19]},{"value":"SQLModel","cspan":1,"rspan":1,"markup":[1,8]},{"value":"Ormdantic","cspan":1,"rspan":1,"markup":[1,9]}],[{"value":"Multimorphism \n(being both a pydantic model \nand a SQLAlchemy model)","cspan":1,"rspan":1,"markup":[1,68]},{"value":"Inherits from pydantic BaseModel\nand uses a modified SQLAlchemy base model \nas its meta-class.","cspan":1,"rspan":1,"markup":[1,94]},{"value":"Uses a wrapper/decorator to make pydantic\nBaseModels behave like database tables as well.","cspan":1,"rspan":1,"markup":[1,89]}],[{"value":"Database connection/async","cspan":1,"rspan":1,"markup":[1,25]},{"value":"Database connection is not built\ninto the main class (SQLModel), \nbut handled by separate equivalents\nof SQLAlchemy classes and functions \n(Session and create_engine).\n<br>\n<br>\nSince the async equivalents are not \navailable in `sqlmodel` yet, \none has to use the original \nSQLAlchemy ext versions, \nwhich is certainly possible, \nbut can be a bit cumbersome \nuntil SQLAlchemy 2.0 is released \n(type checking is also a problem).","cspan":1,"rspan":1,"markup":[1,168,0,4,1,1,0,4,1,51,3,10,1,189]},{"value":"Takes a connection string as a constructor parameter \nand creates sessions internally where needed.\n<br>\n<br>\nIt is \"async by default\" one might say.","cspan":1,"rspan":1,"markup":[1,100,0,4,1,1,0,4,1,40]}],[{"value":"API/Syntax","cspan":1,"rspan":1,"markup":[1,10]},{"value":"You typically interact \nwith both a Session object \nand a SQLModel object, e.g.:\n\n<pre>hero = Hero()<br>session.add(hero)<br>await session.commit()</pre>\n\nIt uses the SQLAlchemy syntax.","cspan":1,"rspan":1,"markup":[1,80,0,75,1,30]},{"value":"You interact with the database abstraction:\n\n<pre>hero = Hero()<br>await database[\"Hero\"].insert(hero)</pre>\n\nThe syntax is similar to `PonyORM`,\nwhich means you can write queries \nto the database using Python generator expressions and lambdas. \nIt makes the structure similar to writing SQL queries \nbut even easier to understand and integrate.","cspan":1,"rspan":1,"markup":[1,43,0,67,1,25,3,9,1,201]}],[{"value":"Background","cspan":1,"rspan":1,"markup":[1,10]},{"value":"A bit more established \nand has the benefit of \nbeing authored by the creator of FastAPI, \nso on paper it should be the ORM to use with FastAPI.\nUnfortunately said creator has a lot on his plate \nand thus `sqlmodel` may not publish new releases \nas often as other projects do.","cspan":1,"rspan":1,"markup":[1,205,3,10,1,61]},{"value":"Brand new and thus unproven, \nbut could be an exciting alternative.","cspan":1,"rspan":1,"markup":[1,67]}]]},"theme":{"ColorTheme":"Default","BorderTheme":"All borders"},"fixed_layout":false,"markup":{"instances":[{},{"style":{}},null,{"style":{"color":"#905","backgroundColor":"#ddd"}},null]},"options":{}}