name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: setup uv
        uses: yezz123/setup-uv@v4
        with:
          uv-version: "0.1.22"
          uv-venv: ".venv"
      - name: Install Dependencies
        run: uv pip install -r requirements/pyproject.txt && uv pip install -r requirements/linting.txt
      - name: Run Pre-commit
        run: bash scripts/format.sh
      - name: check Static Analysis
        run: bash scripts/lint.sh

  tests:

    name: test py${{ matrix.python-version }} on ${{ matrix.os }}

    runs-on: ${{ matrix.os }}-latest


    strategy:

      matrix:

        python-version: ["3.10", "3.11", "3.12"]

        os: [ubuntu, macos, windows]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: setup uv
        uses: yezz123/setup-uv@v4
        with:
          uv-version: "0.1.22"
          uv-venv: ".venv"

      - name: Install Dependencies
        run:  uv pip install -r requirements/pyproject.txt && uv pip install -r requirements/testing.txt && uv pip install -r requirements/extra.txt

      - name: Freeze Dependencies
        run: uv pip freeze

      - name: Test with pytest
        run: bash scripts/test.sh
        env:
          DATABASE_URL: sqlite+aiosqlite:///db.sqlite3

      - name: Upload coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        uses: codecov/codecov-action@v4

  Integration:
    name: test on python ${{ matrix.python-version }} with Integration tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        postgres-version: [14]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:${{ matrix.postgres-version }}
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: setup uv
        uses: yezz123/setup-uv@v4
        with:
          uv-version: "0.1.22"
          uv-venv: ".venv"
      - name: Install Dependencies
        run: uv pip install -r requirements/pyproject.txt && uv pip install -r requirements/testing.txt && uv pip install -r requirements/extra.txt
      - name: Integration Tests - SQLite
        run: bash scripts/integration.sh
        env:
          DATABASE_URL: sqlite+aiosqlite:///db.sqlite3
      - name: Integration Tests - Postgres
        run: bash scripts/integration.sh
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/postgres


  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [lint, tests, Integration]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
